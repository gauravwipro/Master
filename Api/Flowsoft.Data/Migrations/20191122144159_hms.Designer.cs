// <auto-generated />
using System;
using Flowsoft.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Flowsoft.Data.Migrations
{
    [DbContext(typeof(EcomContext))]
    [Migration("20191122144159_hms")]
    partial class hms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Flowsoft.Domain.Models.AdmissionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AdmissionTypes");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("EmergencyNumber")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(200);

                    b.Property<int?>("GenderId");

                    b.Property<bool?>("IsRegular");

                    b.Property<string>("LastName")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<int?>("StateId")
                        .HasColumnName("StateID");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StateId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Genders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Opds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<int>("DoctorId");

                    b.Property<bool>("IsChecked");

                    b.Property<DateTime>("OpdDate");

                    b.Property<string>("OpdNotes")
                        .HasMaxLength(5000);

                    b.Property<int>("PatientId");

                    b.Property<string>("Prescription");

                    b.Property<int>("TokenNumber");

                    b.HasKey("Id");

                    b.ToTable("Opds");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.PatientAdmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdmissionId");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientAdmisionId");

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("PatientAdmisionId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdmission");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("AdhaarCard")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Crnumber");

                    b.Property<string>("EmergencyNumber")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasMaxLength(200);

                    b.Property<int?>("GenderId");

                    b.Property<string>("LastName")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("StateId");

                    b.Property<string>("VoterCard")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.ProductCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsTaxable");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID");

                    b.Property<decimal?>("TaxAmount");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoctorId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("Enable");

                    b.Property<string>("FirstName");

                    b.Property<string>("Hint");

                    b.Property<string>("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("RoleId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Doctors", b =>
                {
                    b.HasOne("Flowsoft.Domain.Models.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Flowsoft.Domain.Models.Genders", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Flowsoft.Domain.Models.States", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.PatientAdmission", b =>
                {
                    b.HasOne("Flowsoft.Domain.Models.AdmissionTypes", "Admission")
                        .WithMany("PatientAdmission")
                        .HasForeignKey("AdmissionId")
                        .HasConstraintName("FK_PatientAdmission_AdmissionType");

                    b.HasOne("Flowsoft.Domain.Models.PatientAdmission", "PatientAdmision")
                        .WithMany("InversePatientAdmision")
                        .HasForeignKey("PatientAdmisionId")
                        .HasConstraintName("FK_PatientAdmission_PatientAdmission");

                    b.HasOne("Flowsoft.Domain.Models.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Flowsoft.Domain.Models.Users", b =>
                {
                    b.HasOne("Flowsoft.Domain.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
